package com.leidos.dataparser.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.leidos.dataparser.appcommon.Constants;
import org.apache.commons.io.IOUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class HelpDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JLabel helpTextLabel;
    private JButton buttonMoreDetail;

    private Logger log = LogManager.getLogger();

    public HelpDialog() {
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        helpTextLabel.setText("<html><h1>" + Constants.APPLICATION_NAME + "</h1><h2>How to Use:</h2>" +
                "1) Click \"Browse...\" and select an input folder containing PCAP files.<br>" +
                "2) Click \"Browse...\" and select an output folder to write converted data to.<br>" +
                "3) Use the checkboxes to select message types you would like to process.<br>" +
                "4) Click \"Start Processing...\".<br>" +
                "5) Resolve filename conflicts (if any).<br>" +
                "6) Wait for processing to complete.<br>" +
                "7) Processed data files will be created in the chosen output folder.<br><br>" +
                "Click \"More...\" below for more detailed use instructions.</html>");

        buttonOK.addActionListener(e -> onOK());
        buttonMoreDetail.addActionListener(e -> onMore());
    }


    private void onMore() {
        log.debug("Opening help file in external application...");
        log.debug("Running application in " + System.getProperty("user.dir"));
        Desktop desktop = Desktop.getDesktop();

        try {
            log.debug("Finding help file in JAR.");
            byte[] data = IOUtils.toByteArray(getClass()
                    .getResourceAsStream("/" + Constants.USER_GUIDE_FILENAME));
            log.debug("Finding location for help file on disk.");
            File userguideOnDisk = new File(Constants.USER_GUIDE_FILENAME);

            if (!userguideOnDisk.exists()) {
                log.debug("Copying help file to disk...");
                FileOutputStream fos = new FileOutputStream(userguideOnDisk);
                fos.write(data);
                fos.close();
            }

            log.debug("Starting external application...");
            desktop.open(userguideOnDisk);
        } catch (IOException e) {
            log.error("Unable to open userguide inside JAR!");
        }

    }

    private void onOK() {
// add your code here
        dispose();
    }

    public static void main(String[] args) {
        HelpDialog dialog = new HelpDialog();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        buttonOK.setToolTipText("Exit the help menu.");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonMoreDetail = new JButton();
        buttonMoreDetail.setText("More...");
        buttonMoreDetail.setToolTipText("Open more detailed help documentation in an external program.");
        panel1.add(buttonMoreDetail, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        helpTextLabel = new JLabel();
        helpTextLabel.setText("Label");
        panel3.add(helpTextLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
